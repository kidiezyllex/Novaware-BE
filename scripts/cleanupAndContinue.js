import mongoose from 'mongoose';
import dotenv from 'dotenv';
import Product from '../models/productModel.js';
import { connectDB, disconnectDB } from '../config/db.js';

dotenv.config();

// Script ƒë·ªÉ x√≥a 5000 s·∫£n ph·∫©m cu·ªëi c√πng
async function deleteLast5000Products() {
  try {
    console.log('üîó Connecting to database...');
    await connectDB();
    
    console.log('üìä Counting total products...');
    const totalProducts = await Product.countDocuments({});
    console.log(`Found ${totalProducts} products in database`);
    
    if (totalProducts <= 5000) {
      console.log('‚ùå Not enough products to delete (need more than 5000)');
      return;
    }
    
    console.log('üóëÔ∏è Deleting last 5000 products...');
    
    // L·∫•y 5000 s·∫£n ph·∫©m cu·ªëi c√πng ƒë·ªÉ x√≥a
    const productsToDelete = await Product.find({})
      .sort({ _id: -1 }) // S·∫Øp x·∫øp theo _id gi·∫£m d·∫ßn (m·ªõi nh·∫•t tr∆∞·ªõc)
      .limit(5000)
      .select('_id name');
    
    console.log(`Found ${productsToDelete.length} products to delete`);
    
    // Hi·ªÉn th·ªã m·ªôt v√†i s·∫£n ph·∫©m s·∫Ω b·ªã x√≥a
    console.log('üîç Sample products to be deleted:');
    productsToDelete.slice(0, 5).forEach((product, index) => {
      console.log(`   ${index + 1}. "${product.name}" (ID: ${product._id})`);
    });
    
    // X√≥a c√°c s·∫£n ph·∫©m
    const deleteResult = await Product.deleteMany({
      _id: { $in: productsToDelete.map(p => p._id) }
    });
    
    console.log(`‚úÖ Successfully deleted ${deleteResult.deletedCount} products`);
    
    // Ki·ªÉm tra s·ªë l∆∞·ª£ng c√≤n l·∫°i
    const remainingProducts = await Product.countDocuments({});
    console.log(`üìä Remaining products: ${remainingProducts}`);
    
  } catch (error) {
    console.error('‚ùå Error deleting products:', error);
    throw error;
  } finally {
    await disconnectDB();
    console.log('üîå Disconnected from database');
  }
}

// Script ƒë·ªÉ ti·∫øp t·ª•c fix products t·ª´ ƒëi·ªÉm ƒë√£ d·ª´ng
async function continueFixProducts() {
  try {
    console.log('üîó Connecting to database...');
    await connectDB();
    
    console.log('üìä Checking current product status...');
    const totalProducts = await Product.countDocuments({});
    const productsWithFeatureVector = await Product.countDocuments({ 
      featureVector: { $exists: true, $ne: [] } 
    });
    const productsWithCategory = await Product.countDocuments({ 
      category: { $ne: 'other', $exists: true } 
    });
    const productsWithCompatible = await Product.countDocuments({ 
      compatibleProducts: { $exists: true, $ne: [] } 
    });
    
    console.log(`Total products: ${totalProducts}`);
    console.log(`Products with featureVector: ${productsWithFeatureVector}`);
    console.log(`Products with proper category: ${productsWithCategory}`);
    console.log(`Products with compatible products: ${productsWithCompatible}`);
    
    if (productsWithFeatureVector === totalProducts && 
        productsWithCategory === totalProducts && 
        productsWithCompatible === totalProducts) {
      console.log('‚úÖ All products are already processed!');
      return;
    }
    
    // Import v√† ch·∫°y fixProducts
    console.log('üîÑ Continuing product fixing...');
    const { default: fixProducts } = await import('./fixProducts.js');
    await fixProducts();
    
  } catch (error) {
    console.error('‚ùå Error continuing fix:', error);
    throw error;
  } finally {
    await disconnectDB();
    console.log('üîå Disconnected from database');
  }
}

// Script ch√≠nh
async function main() {
  try {
    console.log('üöÄ Starting cleanup and continue process...');
    console.log('');
    
    // B∆∞·ªõc 1: X√≥a 5000 s·∫£n ph·∫©m cu·ªëi c√πng
    console.log('=== STEP 1: DELETE LAST 5000 PRODUCTS ===');
    await deleteLast5000Products();
    console.log('');
    
    // B∆∞·ªõc 2: Ti·∫øp t·ª•c fix products
    console.log('=== STEP 2: CONTINUE FIXING PRODUCTS ===');
    await continueFixProducts();
    
    console.log('');
    console.log('üéâ Process completed successfully!');
    
  } catch (error) {
    console.error('üí• Process failed:', error);
    process.exit(1);
  }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { deleteLast5000Products, continueFixProducts };
